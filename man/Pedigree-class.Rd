% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClass.R, R/AllConstructor.R,
%   R/AllAccessors.R, R/AllGeneric.R
\docType{class}
\name{Pedigree-class}
\alias{Pedigree-class}
\alias{Pedigree}
\alias{Pedigree,character_OR_integer-method}
\alias{Pedigree,data.frame-method}
\alias{Pedigree,missing-method}
\alias{famid,Pedigree-method}
\alias{ped}
\alias{ped,Pedigree,ANY-method}
\alias{ped,Pedigree,missing-method}
\alias{ped<-}
\alias{ped<-,Pedigree,ANY,ANY-method}
\alias{ped<-,Pedigree,missing,Ped-method}
\alias{mcols,Pedigree-method}
\alias{mcols<-,Pedigree,ANY-method}
\alias{rel}
\alias{rel,Pedigree,ANY-method}
\alias{rel,Pedigree,missing-method}
\alias{rel<-}
\alias{rel<-,Pedigree,ANY,ANY-method}
\alias{rel<-,Pedigree,missing,Rel-method}
\alias{scales}
\alias{scales,Pedigree-method}
\alias{scales<-}
\alias{scales<-,Pedigree,Scales-method}
\alias{fill,Pedigree-method}
\alias{fill<-,Pedigree,data.frame-method}
\alias{border,Pedigree-method}
\alias{border<-,Pedigree,data.frame-method}
\alias{hints}
\alias{hints,Pedigree-method}
\alias{hints<-}
\alias{hints<-,Pedigree,Hints-method}
\alias{horder,Pedigree-method}
\alias{horder<-,Pedigree-method}
\alias{spouse,Pedigree-method}
\alias{spouse<-}
\alias{spouse<-,Pedigree,data.frame-method}
\alias{length,Pedigree-method}
\alias{show,Pedigree-method}
\alias{summary,Pedigree-method}
\alias{as.list,Pedigree-method}
\alias{subset,Pedigree-method}
\alias{[,Pedigree,ANY,missing,ANY-method}
\title{Pedigree object}
\usage{
Pedigree(obj, ...)

\S4method{Pedigree}{character_OR_integer}(
  obj,
  dadid,
  momid,
  sex,
  famid = NA,
  avail = NULL,
  affected = NULL,
  status = NULL,
  steril = NULL,
  rel_df = NULL,
  missid = NA_character_,
  col_aff = "affection",
  normalize = TRUE,
  ...
)

\S4method{Pedigree}{data.frame}(
  obj = data.frame(indId = character(), fatherId = character(), motherId = character(),
    gender = numeric(), family = character(), available = numeric(), vitalStatus =
    numeric(), affection = numeric(), sterilisation = numeric()),
  rel_df = data.frame(id1 = character(), id2 = character(), code = numeric(), famid =
    character()),
  cols_ren_ped = list(indId = "id", fatherId = "dadid", motherId = "momid", family =
    "famid", gender = "sex", sterilisation = "steril", affection = "affected", available
    = "avail", vitalStatus = "status"),
  cols_ren_rel = list(id1 = "indId1", id2 = "indId2", famid = "family"),
  hints = list(horder = NULL, spouse = NULL),
  normalize = TRUE,
  missid = NA_character_,
  col_aff = "affection",
  ...
)
}
\arguments{
\item{obj}{A vector of the individuals identifiers or a data.frame
with the individuals informations. See \code{\link[=Ped]{Ped()}} for more informations.}

\item{...}{
  Arguments passed on to \code{\link[=generate_colors]{generate_colors}}
  \describe{
    \item{\code{}}{}
  }}

\item{dadid}{A vector containing for each subject, the identifiers of the
biologicals fathers.}

\item{momid}{A vector containing for each subject, the identifiers of the
biologicals mothers.}

\item{sex}{A character, factor or numeric vector corresponding to
the gender of the individuals. This will be transformed to an ordered factor
with the following levels: \code{male} < \code{female} < \code{unknown} < `terminated
The following values are recognized:
\itemize{
\item character() or factor() : "f", "m", "woman", "man", "male", "female",
"unknown", "terminated"
\item numeric() : 1 = "male", 2 = "female", 3 = "unknown", 4 = "terminated"
}}

\item{famid}{A character vector with the family identifiers of the
individuals. If provide, will be aggregated to the individuals
identifiers separated by an underscore.}

\item{avail}{A logical vector with the availability status of the
individuals
(i.e. \code{FALSE} = not available, \code{TRUE} = available, \code{NA} = unknown).}

\item{affected}{A logical vector with the affection status of the
individuals
(i.e. \code{FALSE} = unaffected, \code{TRUE} = affected, \code{NA} = unknown).
Can also be a data.frame with the same length as \code{obj}. If it is a
matrix, it will be converted to a data.frame and the columns will be
named after the \code{col_aff} argument.}

\item{status}{A logical vector with the affection status of the
individuals
(i.e. \code{FALSE} = alive, \code{TRUE} = dead, \code{NA} = unknown).}

\item{steril}{A logical vector with the sterilisation status of the
individuals
(i.e. \code{FALSE} = not sterilised, \code{TRUE} = sterilised, \code{NA} = unknown).}

\item{rel_df}{A data.frame with the special relationships between
individuals. See \code{\link[=Rel]{Rel()}} for more informations.
The minimum columns required are \code{id1}, \code{id2} and \code{code}.
The \code{famid} column can also be used to specify the family
of the individuals.
If a matrix is given, the columns needs to be ordered as
\code{id1}, \code{id2}, \code{code} and \code{famid}.
The code values are:
\itemize{
\item \code{1} = Monozygotic twin
\item \code{2} = Dizygotic twin
\item \code{3} = twin of unknown zygosity
\item \code{4} = Spouse
}

The value relation code recognized by the function are the one defined
by the \code{\link[=rel_code_to_factor]{rel_code_to_factor()}} function.}

\item{missid}{A character vector with the missing values identifiers.
All the id, dadid and momid corresponding to those values will be set
to \code{NA_character_}.}

\item{col_aff}{A character vector with the name of the column to be used
for the affection status.}

\item{normalize}{A logical to know if the data should be normalised.}

\item{cols_ren_ped}{A named list with the columns to rename for the
pedigree dataframe. This is useful if you want to use a dataframe with
different column names. The names of the list should be the new column
names and the values should be the old column names. The default values
are to be used with \code{normalize = TRUE}.}

\item{cols_ren_rel}{A named list with the columns to rename for the
relationship matrix. This is useful if you want to use a dataframe with
different column names. The names of the list should be the new column
names and the values should be the old column names.}

\item{hints}{A Hints object or a named list containing \code{horder} and
\code{spouse}.}
}
\value{
A Pedigree object.
}
\description{
A pedigree is a ensemble of individuals linked to each other into
a family tree.
A Pedigree object store the informations of the individuals and the
special relationships between them. It also permit to store the
informations needed to plot the pedigree (i.e. scales and hints).

\subsection{Constructor :}{

Main constructor of the package.
This constructor help to create a \code{Pedigree} object from
different \code{data.frame} or a set of vectors.

If any errors are found in the data, the function will return
the data.frame with the errors of the Ped object and the
Rel object.
}
}
\details{
If the normalization is set to \code{TRUE}, then the data will be
standardized using the function \code{norm_ped()} and \code{norm_rel()}.

If a data.frame is given, the columns names needed will depend if
the normalization is selected or not. If the normalization is selected,
the columns names needed are as follow and if not the columns names
needed are in parenthesis:
\itemize{
\item \code{indID}: the individual identifier (\code{id})
\item \code{fatherId}: the identifier of the biological father (\code{dadid})
\item \code{motherId}: the identifier of the biological mother (\code{momid})
\item \code{gender}: the sex of the individual (\code{sex})
\item \code{family}: the family identifier of the individual (\code{famid})
\item \code{sterilisation}: the sterilisation status of the individual (\code{steril})
\item \code{available}: the availability status of the individual (\code{avail})
\item \code{vitalStatus}: the death status of the individual (\code{status})
\item \code{affection}: the affection status of the individual (\code{affected})
\item \code{...}: other columns that will be stored in the \code{elementMetadata} slot
}

The minimum columns required are :
\itemize{
\item \code{indID} / \code{id}
\item \code{fatherId} / \code{dadid}
\item \code{motherId} / \code{momid}
\item \code{gender} / \code{sex}
}

The \code{family} / \code{famid} column can also be used to specify the family of the
individuals and will be merge to the \code{indId} / \code{id} field separated by an
underscore.
The columns \code{sterilisation}, \code{available}, \code{vitalStatus}, \code{affection}
will be transformed with the \code{\link[=vect_to_binary]{vect_to_binary()}} function when the
normalisation is selected.
If you do not use the normalisation, the columns will be checked to
be \code{0} or \code{1}.

If \code{affected} is a data.frame, \strong{col_aff} will be overwritten by the column
names of the data.frame.
}
\section{Slots}{

\describe{
\item{\code{ped}}{A Ped object for the identity informations. See \code{\link[=Ped]{Ped()}} for
more informations.}

\item{\code{rel}}{A Rel object for the special relationships. See \code{\link[=Rel]{Rel()}} for
more informations.}

\item{\code{scales}}{A Scales object for the filling and bordering
colors used in the plot. See \code{\link[=Scales]{Scales()}} for more informations.}

\item{\code{hints}}{A Hints object for the ordering of the
individuals in the plot. See \code{\link[=Hints]{Hints()}} for more informations.}
}}

\section{Accessors}{

For all the following accessors, the \code{x} parameters is a Pedigree object.
Each getters return a vector of the same length as \code{x} with the values
of the corresponding slot.


\itemize{
\item \code{famid(x)} : Get the family identifiers of a Pedigree object. This
function is a wrapper around \code{famid(ped(x))}.
}


\itemize{
\item \code{ped(x, slot)} : Get the value of a specific slot of the Ped object
}


\itemize{
\item \code{ped(x)} : Get the Ped object
}


\itemize{
\item \code{ped(x, slot) <- value} : Set the value of a specific slot of
the Ped object
Wrapper of \code{slot(ped(x)) <- value}
}


\itemize{
\item \code{ped(x) <- value} : Set the Ped object
}


\itemize{
\item \code{mcols(x)} : Get the metadata of a Pedigree object.
This function is a wrapper around \code{mcols(ped(x))}.
}


\itemize{
\item \code{mcols(x) <- value} : Set the metadata of a Pedigree object.
This function is a wrapper around \code{mcols(ped(x)) <- value}.
}


\itemize{
\item \code{rel(x, slot)} : Get the value of a specific slot of the Rel object
}


\itemize{
\item \code{rel(x)} : Get the Rel object
}


\itemize{
\item \code{rel(x, slot) <- value} : Set the value of a specific slot of the
Rel object
Wrapper of \code{slot(rel(x)) <- value}
}


\itemize{
\item \code{rel(x) <- value} : Set the Rel object
}


\itemize{
\item \code{scales(x)} : Get the Scales object
}


\itemize{
\item \code{scales(x) <- value} : Set the Scales object
}


\itemize{
\item \code{fill(x)} : Get the fill data.frame from the Scales object.
Wrapper of \code{fill(scales(x))}
}


\itemize{
\item \code{fill(x) <- value} : Set the fill data.frame from the Scales object.
Wrapper of \code{fill(scales(x)) <- value}
}


\itemize{
\item \code{border(x)} : Get the border data.frame from the Scales object.
Wrapper of \code{border(scales(x))}
}


\itemize{
\item \code{border(x) <- value} : Set the border data.frame from the Scales object.
Wrapper of \code{border(scales(x)) <- value}
}


\itemize{
\item \code{hints(x)} : Get the Hints object
}


\itemize{
\item \code{hints(x) <- value} : Set the Hints object
}


\itemize{
\item \code{horder(x)} : Get the horder vector from the Hints object.
Wrapper of \code{horder(hints(x))}
}


\itemize{
\item \code{horder(x) <- value} : Set the horder vector from the Hints object.
Wrapper of \code{horder(hints(x)) <- value}
}


\itemize{
\item \code{spouse(x)} : Get the spouse data.frame from the Hints object.
Wrapper of \code{spouse(hints(x))}.
}


\itemize{
\item \code{spouse(x) <- value} : Set the spouse data.frame from the Hints object.
Wrapper of \code{spouse(hints(x)) <- value}.
}
}

\section{Generics}{

\itemize{
\item \code{length(x)}: Get the length of a Pedigree object.
Wrapper of \code{length(ped(x))}.
}


\itemize{
\item \code{show(x)}: Print the information of the Ped and Rel
object inside the Pedigree object.
}


\itemize{
\item \code{summary(x)}: Compute the summary of the Ped and Rel object
inside the Pedigree object.
}


\itemize{
\item \code{as.list(x)}: Convert a Pedigree object to a list
}


\itemize{
\item \code{subset(x, i, keep = TRUE)}: Subset a Pedigree object
based on the individuals identifiers given.
\itemize{
\item \code{i} : A vector of individuals identifiers to keep.
\item \code{del_parents} : A logical value indicating if the parents
of the individuals should be deleted.
\item \code{keep} : A logical value indicating if the individuals
should be kept or deleted.
}
}


\itemize{
\item \code{x[i, del_parents, keep]}: Subset a Pedigree object
based on the individuals identifiers given.
}
}

\examples{

Pedigree(
   obj = c("1", "2", "3", "4", "5", "6"),
   dadid = c("4", "4", "6", "0", "0", "0"),
   momid = c("5", "5", "5", "0", "0", "0"),
   sex = c(1, 2, 3, 1, 2, 1),
   avail = c(0, 1, 0, 1, 0, 1),
   affected = matrix(c(
       0, 1, 0, 1, 0, 1,
       1, 1, 1, 1, 1, 1
   ), ncol = 2),
   col_aff = c("aff1", "aff2"),
   missid = "0",
   rel_df = matrix(c(
      "1", "2", 2
   ), ncol = 3, byrow = TRUE),
)

data(sampleped)
Pedigree(sampleped)
}
\seealso{
\code{\link[=Pedigree]{Pedigree()}}, \code{\link[=Ped]{Ped()}}, \code{\link[=Rel]{Rel()}}, \code{\link[=Scales]{Scales()}}, \code{\link[=Hints]{Hints()}}

\code{\link[=Ped]{Ped()}}, \code{\link[=Rel]{Rel()}}, \code{\link[=Scales]{Scales()}}
}
